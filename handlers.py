from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import ChatPermissions

import time
from time import sleep
import random

from telegram_config import tg_id
from messages import msg
from udb import user_database


app = Client("my_account")
db = user_database('user_database.db')


@app.on_message(filters.command("allusers", prefixes="."))
def help_message(_, message):
    for member in app.iter_chat_members(chat_id=tg_id.chat_id):
        app.send_message("me", member.user.username)
        sleep(0.3)


@app.on_message(filters.regex("Mentoring X") & ~filters.me)
def message_id(_, message):
    if message.chat.type not in "private":
        return
    next_id = message.message_id + 1
    app.send_message(chat_id=message.from_user.id, text='–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç')
    perc = 0

    while perc < 100:
        try:
            text = "–ò–¥–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö..." + str(perc) + "%"
            app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text=text)

            perc += random.randint(10, 17)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text="üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    sleep(1)

    app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text="üîú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
    perc = 0

    while perc < 100:
        try:
            text = "üîú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." + str(perc) + "%"
            app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text=text)

            perc += random.randint(1, 5)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    app.edit_message_text(
        chat_id=message.from_user.id,
        message_id=next_id,
        text="üü¢ –°–ø–∞—Å–∏–±–æ. –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
             "**–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞**",
        parse_mode="markdown")
    app.send_message('me', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω @{message.from_user.username} {message.from_user.id}')


@app.on_message(filters.command("help", prefixes="."))
def help_message(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.help)


@app.on_message(filters.command("services", prefixes="."))
def services(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.services)


@app.on_message(filters.command("accelerator", prefixes="."))
def accelerator(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.accelerator,
                     disable_web_page_preview=True)


@app.on_message(filters.command("instruction", prefixes="."))
def instruction(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.instruction,
                     disable_web_page_preview=True)


@app.on_message(filters.command("self", prefixes="."))
def self(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.self_presentation,
                     disable_web_page_preview=True)


@app.on_message(filters.command("contacts", prefixes="."))
def contacts(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat,
                     text=msg.contacts)


@app.on_message(filters.command("notion", prefixes="."))
def notion(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=16)


@app.on_message(filters.command("instagram", prefixes="."))
def instagram(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=22)


@app.on_message(filters.command("woman", prefixes="."))
def woman(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=20)


@app.on_message(filters.command("armor", prefixes="."))
def armor(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=28)


@app.on_message(filters.command("funnel", prefixes="."))
def funnel(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=18)


@app.on_message(filters.command("secret", prefixes="."))
def secret(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=24)


@app.on_message(filters.command("gift", prefixes="."))
def gift(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=26)


@app.on_message(filters.command("testosterone", prefixes="."))
def testosterone(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.forward_messages(
        chat_id=chat,
        from_chat_id=tg_id.files,
        message_ids=30)


@app.on_message(filters.command("telemetry", prefixes="."))
def telemetry(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat, msg.telemetry)
    app.forward_messages(chat_id=chat,
                         from_chat_id=tg_id.files,
                         message_ids=11)


@app.on_message(filters.chat('me') & filters.video)
def contacts(_, message):
    app.send_message(chat_id='me',
                     text=f'{message.video.file_id}')


@app.on_message(filters.chat(tg_id.files) & filters.video)
def contacts(_, message):
    app.send_message(chat_id=tg_id.files,
                     text=f'{message.video.file_id}, {message.message_id}')


@app.on_message(filters.chat(tg_id.files) & filters.document)
def contacts(_, message):
    app.send_message(chat_id=tg_id.files,
                     text=f'{message.document.file_id}, {message.message_id}')


@app.on_message(filters.chat('me') & filters.document)
def contacts(_, message):
    app.send_message(chat_id='me',
                     text=f'{message.document.file_id}, {message.message_id}')


@app.on_message(filters.regex('.test'))
def funcs(_, message):
    app.restrict_chat_member(chat_id=tg_id.chat_id,
                             user_id=message.from_user.id,
                             permissions=ChatPermissions(),
                             until_date=int(time.time() + 40))


@app.on_message(filters.command("chats", prefixes=".") & filters.me)
def chats(_, message):  # sourcery skip: dict-comprehension, move-assign-in-block
    app.delete_messages(tg_id.chat_id, message.message_id)
    chat = tg_id.chat_id
    people = {}
    total = app.get_chat_members_count(chat)
    for message in app.iter_history(chat, limit=1000):
        if message.from_user and not message.from_user.is_bot:
            people[message.from_user.id] = message.from_user.first_name

    print(len(people) / total)


@app.on_message(filters.regex("22212221") & ~filters.me)
def avtootvet(_, message):
    if message.chat.type not in "private":
        return
    next_id = message.message_id + 1
    app.send_message(chat_id=message.from_user.id, text='–°–µ–∫—É–Ω–¥—É...')
    perc = 0

    while perc < 100:
        try:
            text = "üß≠ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ ..." + str(perc) + "%"
            app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text=text)

            perc += random.randint(3, 6)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text="üü¢ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω!")
    sleep(1)

    app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text="üîú –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ...")
    perc = 0

    while perc < 100:
        try:
            text = "üîú –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ..." + str(perc) + "%"
            app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text=text)

            perc += random.randint(1, 5)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    app.edit_message_text(chat_id=message.from_user.id, message_id=next_id, text="üü¢ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    app.send_message('me', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª @{message.from_user.username} {message.from_user.id}')


@app.on_message(filters.voice_chat_started & filters.chat(tg_id.chat_id))
def voice_chat_started(_):
    app.send_message(chat_id=tg_id.chat_id, text='**–í–ù–ò–ú–ê–ù–ò–ï!**\n'
                                                 '–°–æ–∑–≤–æ–Ω –Ω–∞—á–∞–ª—Å—è.\n'
                                                 '–ó–∞—Ö–æ–¥–∏—Ç–µ')


@app.on_message(filters.regex('self-presentation') & filters.me)
def voice_chat_scheduled(_, message):
    chat = message.chat.id
    app.delete_messages(chat, message.message_id)
    app.send_message(chat_id=chat, text=msg.self_presentation)


@app.on_message(filters.regex('vc-scheduled') & filters.chat(tg_id.chat_id) & filters.me)
def voice_chat_scheduled(_, message):
    app.delete_messages(tg_id.chat_id, message.message_id)
    app.send_poll(
        chat_id=tg_id.chat_id,
        question='–í–Ω–∏–º–∞–Ω–∏–µ, —è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫.\n'
                 '–ö—Ç–æ –±—É–¥–µ—Ç?',
        options=list(['–¢–æ—á–Ω–æ –±—É–¥—É',
                      '–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å',
                      '–•–æ—á—É, –Ω–æ –Ω–µ –º–æ–≥—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è',
                      '–ù–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ']),
        is_anonymous=False

    )
    sleep(1)
    app.vote_poll(chat_id=tg_id.chat_id, message_id=message.message_id, options=0)


@app.on_message(filters.voice_chat_ended & filters.chat(tg_id.chat_id))
def voice_chat_started(_, message):
    app.send_message(
        chat_id=tg_id.chat_id,
        text='–°–æ–∑–≤–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.\n–í—Å–µ, –∫—Ç–æ –±—ã–ª –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ - –≤—ã –º–æ–ª–æ–¥—Ü—ã!',
    )

    app.send_poll(
        chat_id=tg_id.chat_id,
        question='–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –ø—Ä–æ—à–µ–¥—à–µ–º—É —Å–æ–∑–≤–æ–Ω—É...',
        options=list(['–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –∏–∑–≤–ª—ë–∫ –¥–ª—è —Å–µ–±—è –ø–æ–ª—å–∑—É, –ø–æ–π–¥—É –≤–Ω–µ–¥—Ä—è—Ç—å',
                      '–ë—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —Å–µ–±—è (—Å–≤–æ–µ–π –Ω–∏—à–∏)',
                      '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–∑–≤–æ–Ω–µ, –Ω–µ —Å–º–æ–≥ –≤ —ç—Ç–æ –≤—Ä–µ–º—è',
                      '–ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–æ–∑–≤–æ–Ω–µ, –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ']),
        is_anonymous=False

    )
    sleep(2)
    app.vote_poll(chat_id=tg_id.chat_id,
                  message_id=message.message_id,
                  options=0)


# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.on_message(filters.new_chat_members & filters.chat(tg_id.chat_id))
def new_chat_members(_, message):
    mention = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'

    if not db.subscriber_exists(message.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
        app.send_chat_action(chat_id=tg_id.chat_id, action='typing')
        sleep(3)
        app.send_message(chat_id=tg_id.chat_id,
                         text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {mention}!\n'
                              f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä!\n'
                              f'–ú–æ–∂–µ—à—å –∫—Ä–∞—Ç–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è.\n'
                              f'**–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω(-–Ω–∞) –∏ —Å –∫–∞–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?**')
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –±–ª–æ–∫–∏—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞
        db.update_subscription(message.from_user.id, False)
        app.block_user(user_id=message.from_user.id)
        app.ban_chat_member(chat_id=tg_id.chat_id, user_id=message.from_user.id)
        app.delete_messages(message.chat.id, message.message_id)


@app.on_message(filters.left_chat_member & filters.chat(tg_id.chat_id))
def left_chat_member(_, message):
    app.send_chat_action(chat_id=tg_id.chat_id, action='typing')
    sleep(5)
    app.send_message(
        chat_id=tg_id.chat_id,
        text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.from_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É')
    app.block_user(user_id=message.from_user.id)


@app.on_message(filters.chat(tg_id.chat_1))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_1)


@app.on_message(filters.chat(tg_id.chat_2))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_2)


@app.on_message(filters.chat(tg_id.chat_3))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_3)


@app.on_message(filters.chat(tg_id.chat_4))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_4)


@app.on_message(filters.chat(tg_id.chat_5))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_5)


@app.on_message(filters.chat(tg_id.chat_6))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_6)


@app.on_message(filters.chat(tg_id.chat_7))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_7)


@app.on_message(filters.chat(tg_id.chat_8))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_8)


@app.on_message(filters.chat(tg_id.chat_9))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_9)


@app.on_message(filters.chat(tg_id.chat_10))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_10)


@app.on_message(filters.chat(tg_id.chat_11))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_11)


@app.on_message(filters.chat(tg_id.chat_12))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_12)


@app.on_message(filters.chat(tg_id.chat_13))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_13)


@app.on_message(filters.chat(tg_id.chat_14))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_14)


@app.on_message(filters.chat(tg_id.chat_15))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_15)


@app.on_message(filters.chat(tg_id.chat_16))
def left_chat_member(_, message):
    app.read_history(tg_id.chat_16)
